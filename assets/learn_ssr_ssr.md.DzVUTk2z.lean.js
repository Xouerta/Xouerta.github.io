import{_ as a,c as s,a0 as r,o as t}from"./chunks/framework.BhWNuinB.js";const u=JSON.parse('{"title":"SSR(服务端渲染)","description":"","frontmatter":{},"headers":[],"relativePath":"learn/ssr/ssr.md","filePath":"learn/ssr/ssr.md"}'),o={name:"learn/ssr/ssr.md"};function n(l,e,i,d,c,S){return t(),s("div",null,e[0]||(e[0]=[r('<h1 id="ssr-服务端渲染" tabindex="-1">SSR(服务端渲染) <a class="header-anchor" href="#ssr-服务端渲染" aria-label="Permalink to &quot;SSR(服务端渲染)&quot;">​</a></h1><ul><li>刚开始看到SSR的时候，我还以为是什么抽卡游戏打过来了（雾）</li></ul><h3 id="对ssr-的接触始于我学vue的时候-服务端渲染的概念-感觉就是把前端的代码-通过nodejs-运行-然后把运行结果返回给浏览器-这样-前端代码就运行在服务器上-而不是在浏览器上。这样感觉对服务器要求很高" tabindex="-1">对SSR 的接触始于我学vue的时候，服务端渲染的概念，感觉就是把前端的代码，通过nodejs 运行，然后把运行结果返回给浏览器，这样，前端代码就运行在服务器上，而不是在浏览器上。这样感觉对服务器要求很高 <a class="header-anchor" href="#对ssr-的接触始于我学vue的时候-服务端渲染的概念-感觉就是把前端的代码-通过nodejs-运行-然后把运行结果返回给浏览器-这样-前端代码就运行在服务器上-而不是在浏览器上。这样感觉对服务器要求很高" aria-label="Permalink to &quot;对SSR 的接触始于我学vue的时候，服务端渲染的概念，感觉就是把前端的代码，通过nodejs 运行，然后把运行结果返回给浏览器，这样，前端代码就运行在服务器上，而不是在浏览器上。这样感觉对服务器要求很高&quot;">​</a></h3><h3 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">​</a></h3>',4)]))}const m=a(o,[["render",n]]);export{u as __pageData,m as default};
